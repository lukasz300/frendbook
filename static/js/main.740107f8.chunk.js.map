{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","CardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","Response","json","users","filteredRobots","this","filter","toLowerCase","includes","console","log","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCLSC,EAXF,SAACC,GACE,OACA,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,eAAUC,IAAK,wBAA0BH,EAAMI,GAAK,aAC7D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCKnBC,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE1E,OACJ,6BACCG,ICEcI,EATS,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAElB,OAAS,yBAAKb,UAAU,OACZ,2BAAOA,UAAU,mCACjBc,KAAK,SACLC,YAAY,eACZC,SAAUH,MCAfI,EANA,SAAClB,GAChB,OACI,yBAAKmB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DtB,EAAMuB,WCsCAC,G,wDAnCX,aAAe,IAAD,8BACV,gBAaLC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAbpC,EAAKC,MAAQ,CACTvB,OAAQ,GACRoB,YAAa,IAJZ,E,gEAQK,IAAD,OACfI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OAAOF,MAAK,SAAAG,GAAK,OAC/F,EAAKT,SAAS,CAAEnB,OAAO4B,Y,+BAShB,IAAD,OAECC,EAAiBC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAA/B,GAC/C,OAAOA,EAAOH,KAAKmC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAElE,OADCE,QAAQC,IAAIN,GAER,yBAAKpC,UAAU,MACZ,wBAAIA,UAAU,MAAd,aACA,kBAAC,EAAD,CAAWa,aAAgBwB,KAAKb,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUjB,OAAS6B,U,GA/BrBO,cCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMC,a","file":"static/js/main.740107f8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) =>{\n                return(\n                <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n                    <img alt='ZdjÄ™cie' src={'https://robohash.org/' + props.id + '?200x200'}/>\n                    <div>\n                        <h2>{props.name}</h2>\n                        <p>{props.email}</p>\n                    </div>\n                </div>\n                )}\n\nexport default Card;    ","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    const CardComponent = robots.map((user, i) => {\n        return <Card id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n    });\n    return(\n<div>\n{CardComponent}\n</div>\n    )\n}\nexport default CardList;","import React from \"react\";\n\n      const SearchBox = ({searchChange}) => {    \n         \n        return ( <div className='pa2'>\n                    <input className='pa3 ba b--green bg-lightest-blue'  \n                    type=\"search\"\n                    placeholder=\"Search robot\"\n                    onChange={searchChange}\n                    />  \n         </div> );}\nexport default SearchBox;   ","import React from 'react';\n\nconst Scroll = (props) => {\nreturn(\n    <div style={{overflowY:'scroll', border:'1px solid black', height:'500px' }}>\n        {props.children}\n    </div>\n);};\nexport default Scroll;","import React, { Component } from \"react\";\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './scroll.js'\nimport './app.css';\n\nclass App extends Component {\n   \n    constructor() {\n        super() \n             this.state = {\n                 robots: [],\n                 searchfield: ''    \n             }   \n            }\n\n   componentDidMount(){\n       fetch('https://jsonplaceholder.typicode.com/users').then(Response => Response.json().then(users =>\n       this.setState({ robots:users})));\n   }         \n\n\n   onSearchChange = (event) => {\n       this.setState({ searchfield: event.target.value })       \n    }\n   \n\n    render() {    \n        \n        const filteredRobots = this.state.robots.filter(robots =>{ \n         return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())})\n         console.log(filteredRobots)\n        return(\n             <div className='tc'>\n                <h1 className='f1'>FrendBook</h1>\n                <SearchBox searchChange = {this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots ={filteredRobots}/>\n                </Scroll>\n            </div>  \n            );\n}\n}   \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}